import {
  PX_TO_CM,
  CUTTING_SPEEDS,
  ENGRAVING_SPEED,
  COST_PER_SECOND,
} from "./constants";

/**
 * –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –ª–∞–∑–µ—Ä–∞
 * @param {Object} params
 * @param {"cutting"|"engraving"} params.mode
 * @param {string} params.thickness
 * @param {number} params.widthCm
 * @param {number} params.heightCm
 * @param {number} params.initialWidthCm
 * @param {number} params.initialHeightCm
 * @param {number} params.vectorLength - –≤ –ø–∏–∫—Å–µ–ª—è—Ö
 * @param {number} params.materialCost - —Ü–µ–Ω–∞ –∑–∞ –≤–µ—Å—å –ª–∏—Å—Ç 150x150 —Å–º
 */
export function calculateLaserJob({
  mode,
  thickness,
  widthCm,
  heightCm,
  initialWidthCm,
  initialHeightCm,
  vectorLength,
  materialCost,
}) {
  const area = widthCm * heightCm;

  // üîÅ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞ (–≤ –ø–∏–∫—Å–µ–ª—è—Ö) –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
  const scaleFactor = widthCm / initialWidthCm;
  const scaledVectorLengthPx = vectorLength * scaleFactor;
  const scaledVectorLengthCm = scaledVectorLengthPx / PX_TO_CM;

  let operationTime = 0;
  let work = 0;

  if (mode === "cutting") {
    operationTime = scaledVectorLengthCm / CUTTING_SPEEDS[thickness];
    work = scaledVectorLengthCm;
  } else {
    operationTime = area / ENGRAVING_SPEED;
    work = area;
  }

  // üí∞ –†–∞—Å—á—ë—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
  const fullSheetArea = 150 * 150; // —Å–º¬≤
  const materialCostPerCm2 = materialCost / fullSheetArea;
  const usedMaterialCost = area * materialCostPerCm2;

  const totalCost = operationTime * COST_PER_SECOND + usedMaterialCost;

  return {
    operationTime,
    totalCost,
    work,
  };
}
